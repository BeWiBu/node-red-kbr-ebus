[{"id":"a7ce3e8b.ddc4e","type":"function","z":"e359ad6c.0d509","name":"Evaluate Telexes","func":"function _calcCRC(data){\n    //Calc CRC\n    //console.log(\"calcCRC\",data);\n    var crc=0;\n    data.forEach(function(byteVal) {\n        crc ^= byteVal;\n    }); \n    return crc;\n}\n\nfunction Evaluate(telexbuffer){\n    //console.log(\"Eval\",telexbuffer);\n    if(!Buffer.isBuffer(telexbuffer) || telexbuffer.length===0)\n        return null;\n    var telex={\n        stx:0,\n        lot:0,\n        to:0,\n        from:0,\n        data:null,\n        error:null,\n        bufferBefore:Buffer.allocUnsafe(0),\n        bufferAfter:Buffer.allocUnsafe(0),\n        raw:Buffer.allocUnsafe(0),\n    };             \n    \n    \n        \n    var pos=0;\n        \n    const STX=0x02;\n    const ACK=0x06;\n    const NAK=0x15;\n    const CAN=0x18;\n    if(Buffer.isBuffer(telexbuffer) && telexbuffer.length>0){\n        \n        var bufferBefore=[];\n        var bot=telexbuffer.readUInt8(0);\n        var isSTX=false;\n        var isAnswer=false;\n        do{\n            switch(bot){\n                case STX:\n                    isSTX=true;\n                    isAnswer=true;\n                    break;\n                case ACK:\n                case NAK:\n                case CAN:\n                    isAnswer=true;\n                    break;\n                default:\n                    bufferBefore.push(bot);\n                    telexbuffer=telexbuffer.slice(1,telexbuffer.length); \n                    break;\n            }\n            if(telexbuffer.length===0)\n                break;\n            bot=telexbuffer.readUInt8(0);\n        }while(!isAnswer);\n        \n        \n        telex.bufferBefore=new Buffer(bufferBefore);\n        telex.bufferAfter=telexbuffer;\n        if(!isAnswer)\n            return null;\n        //node.warn(telex.bufferBefore);\n        //node.warn(telex.bufferAfter);\n        //return;\n        \n        \n        telex.stx=bot;\n        \n        //Check if this is a valid telex start\n        if(telex.stx===0x02){\n            \n            if(telexbuffer.length<2)\n                return null;\n            \n            pos=1;\n            //Get telex length\n            telex.lot=telexbuffer[pos++];\n            if((telexbuffer.length-2)<telex.lot){\n                //console.log(telexbuffer,\"Incomplete\");\n                return null;\n            }\n                \n            //Check CRC\n            var telexCrc=telexbuffer[telex.lot+1];\n            //console.log(\"CRC=\",telexCrc);\n            var telexWOCRC=telexbuffer.slice(0,telex.lot+1);            \n            var checkCrc=_calcCRC(telexWOCRC);            \n            //console.log(\"CALCED=\",checkCrc);\n            if(telexCrc!=checkCrc){        \n                telex.bufferAfter=telexbuffer.slice(telex.lot+2);\n                telex.error=\"Telex checksum error\";\n                //console.log(telexbuffer,\"CRC error\");\n                return telex;                \n            }\n        \n            //Get telex content\n            telex.to=telexbuffer.readUInt16BE(pos);\n            pos+=2;\n            telex.from=telexbuffer.readUInt16BE(pos);\n            pos+=2;\n            \n            telex.data=telexbuffer.slice(pos,telex.lot+1);\n            telex.raw=telexbuffer.slice(0,telex.lot+1);\n            telex.bufferAfter=telexbuffer.slice(telex.lot+2);\n            //console.log(\"TLX OK\",telex);\n            return telex;\n        }\n        else{\n            telex.raw=telexbuffer.slice(0,1);\n            telex.bufferAfter=telexbuffer.slice(1);\n            //console.log(\"TLX OK\",telex);\n            return telex;\n        }\n        \n    }\n    return null;\n}\n\n\n//Neue bytes dem aktuellen Puffer hinzufÃ¼gen\nvar list=[];\nvar lastbuffer=context.get(\"buffer\")||null;\n//console.log(\"Last buffer\",telexbuffer);\nif(Buffer.isBuffer(lastbuffer))\n    list.push(lastbuffer);\nlist.push(new Buffer(msg.payload));\nvar telexbuffer=Buffer.concat(list);\n//console.log(\"Write buffer\",telexbuffer);\ncontext.set(\"buffer\",telexbuffer);\n\n\nvar result=[];\nvar telex=Evaluate(telexbuffer);\nwhile(telex!==null){\n    //console.log(\"telex\",telex);\n    result.push(telex);\n    context.set(\"buffer\",telex.bufferAfter);\n    telex=Evaluate(telex.bufferAfter);\n}\n    \nif(result.length>0){\n    msg.payload=result;\n    return msg;\n}\n","outputs":"1","noerr":0,"x":249,"y":63,"wires":[[]]}]
